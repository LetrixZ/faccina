//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Tags = newTagsTable("", "tags", "")

type tagsTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Namespace   sqlite.ColumnString
	Name        sqlite.ColumnString
	DisplayName sqlite.ColumnString
	Hidden      sqlite.ColumnBool
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type TagsTable struct {
	tagsTable

	EXCLUDED tagsTable
}

// AS creates new TagsTable with assigned alias
func (a TagsTable) AS(alias string) *TagsTable {
	return newTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TagsTable with assigned schema name
func (a TagsTable) FromSchema(schemaName string) *TagsTable {
	return newTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TagsTable with assigned table prefix
func (a TagsTable) WithPrefix(prefix string) *TagsTable {
	return newTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TagsTable with assigned table suffix
func (a TagsTable) WithSuffix(suffix string) *TagsTable {
	return newTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTagsTable(schemaName, tableName, alias string) *TagsTable {
	return &TagsTable{
		tagsTable: newTagsTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newTagsTableImpl("", "excluded", ""),
	}
}

func newTagsTableImpl(schemaName, tableName, alias string) tagsTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		NamespaceColumn   = sqlite.StringColumn("namespace")
		NameColumn        = sqlite.StringColumn("name")
		DisplayNameColumn = sqlite.StringColumn("display_name")
		HiddenColumn      = sqlite.BoolColumn("hidden")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		allColumns        = sqlite.ColumnList{IDColumn, NamespaceColumn, NameColumn, DisplayNameColumn, HiddenColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = sqlite.ColumnList{NamespaceColumn, NameColumn, DisplayNameColumn, HiddenColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns    = sqlite.ColumnList{HiddenColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return tagsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Namespace:   NamespaceColumn,
		Name:        NameColumn,
		DisplayName: DisplayNameColumn,
		Hidden:      HiddenColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
