//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserCodes = newUserCodesTable("", "user_codes", "")

type userCodesTable struct {
	sqlite.Table

	// Columns
	UserID     sqlite.ColumnString
	Code       sqlite.ColumnString
	Type       sqlite.ColumnString
	CreatedAt  sqlite.ColumnTimestamp
	ConsumedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserCodesTable struct {
	userCodesTable

	EXCLUDED userCodesTable
}

// AS creates new UserCodesTable with assigned alias
func (a UserCodesTable) AS(alias string) *UserCodesTable {
	return newUserCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserCodesTable with assigned schema name
func (a UserCodesTable) FromSchema(schemaName string) *UserCodesTable {
	return newUserCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserCodesTable with assigned table prefix
func (a UserCodesTable) WithPrefix(prefix string) *UserCodesTable {
	return newUserCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserCodesTable with assigned table suffix
func (a UserCodesTable) WithSuffix(suffix string) *UserCodesTable {
	return newUserCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserCodesTable(schemaName, tableName, alias string) *UserCodesTable {
	return &UserCodesTable{
		userCodesTable: newUserCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newUserCodesTableImpl("", "excluded", ""),
	}
}

func newUserCodesTableImpl(schemaName, tableName, alias string) userCodesTable {
	var (
		UserIDColumn     = sqlite.StringColumn("user_id")
		CodeColumn       = sqlite.StringColumn("code")
		TypeColumn       = sqlite.StringColumn("type")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		ConsumedAtColumn = sqlite.TimestampColumn("consumed_at")
		allColumns       = sqlite.ColumnList{UserIDColumn, CodeColumn, TypeColumn, CreatedAtColumn, ConsumedAtColumn}
		mutableColumns   = sqlite.ColumnList{UserIDColumn, CodeColumn, TypeColumn, CreatedAtColumn, ConsumedAtColumn}
		defaultColumns   = sqlite.ColumnList{CreatedAtColumn}
	)

	return userCodesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		Code:       CodeColumn,
		Type:       TypeColumn,
		CreatedAt:  CreatedAtColumn,
		ConsumedAt: ConsumedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
