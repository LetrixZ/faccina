//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Archives = newArchivesTable("", "archives", "")

type archivesTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Title       sqlite.ColumnString
	Description sqlite.ColumnString
	Path        sqlite.ColumnString
	Hash        sqlite.ColumnString
	Pages       sqlite.ColumnInteger
	Size        sqlite.ColumnInteger
	Thumbnail   sqlite.ColumnInteger
	Language    sqlite.ColumnString
	ReleasedAt  sqlite.ColumnTimestamp
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp
	DeletedAt   sqlite.ColumnTimestamp
	Protected   sqlite.ColumnBool

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ArchivesTable struct {
	archivesTable

	EXCLUDED archivesTable
}

// AS creates new ArchivesTable with assigned alias
func (a ArchivesTable) AS(alias string) *ArchivesTable {
	return newArchivesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArchivesTable with assigned schema name
func (a ArchivesTable) FromSchema(schemaName string) *ArchivesTable {
	return newArchivesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArchivesTable with assigned table prefix
func (a ArchivesTable) WithPrefix(prefix string) *ArchivesTable {
	return newArchivesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArchivesTable with assigned table suffix
func (a ArchivesTable) WithSuffix(suffix string) *ArchivesTable {
	return newArchivesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArchivesTable(schemaName, tableName, alias string) *ArchivesTable {
	return &ArchivesTable{
		archivesTable: newArchivesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newArchivesTableImpl("", "excluded", ""),
	}
}

func newArchivesTableImpl(schemaName, tableName, alias string) archivesTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		TitleColumn       = sqlite.StringColumn("title")
		DescriptionColumn = sqlite.StringColumn("description")
		PathColumn        = sqlite.StringColumn("path")
		HashColumn        = sqlite.StringColumn("hash")
		PagesColumn       = sqlite.IntegerColumn("pages")
		SizeColumn        = sqlite.IntegerColumn("size")
		ThumbnailColumn   = sqlite.IntegerColumn("thumbnail")
		LanguageColumn    = sqlite.StringColumn("language")
		ReleasedAtColumn  = sqlite.TimestampColumn("released_at")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		DeletedAtColumn   = sqlite.TimestampColumn("deleted_at")
		ProtectedColumn   = sqlite.BoolColumn("protected")
		allColumns        = sqlite.ColumnList{IDColumn, TitleColumn, DescriptionColumn, PathColumn, HashColumn, PagesColumn, SizeColumn, ThumbnailColumn, LanguageColumn, ReleasedAtColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ProtectedColumn}
		mutableColumns    = sqlite.ColumnList{TitleColumn, DescriptionColumn, PathColumn, HashColumn, PagesColumn, SizeColumn, ThumbnailColumn, LanguageColumn, ReleasedAtColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ProtectedColumn}
		defaultColumns    = sqlite.ColumnList{ThumbnailColumn, CreatedAtColumn, UpdatedAtColumn, ProtectedColumn}
	)

	return archivesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Path:        PathColumn,
		Hash:        HashColumn,
		Pages:       PagesColumn,
		Size:        SizeColumn,
		Thumbnail:   ThumbnailColumn,
		Language:    LanguageColumn,
		ReleasedAt:  ReleasedAtColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		Protected:   ProtectedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
