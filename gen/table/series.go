//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Series = newSeriesTable("", "series", "")

type seriesTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Title     sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type SeriesTable struct {
	seriesTable

	EXCLUDED seriesTable
}

// AS creates new SeriesTable with assigned alias
func (a SeriesTable) AS(alias string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesTable with assigned schema name
func (a SeriesTable) FromSchema(schemaName string) *SeriesTable {
	return newSeriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesTable with assigned table prefix
func (a SeriesTable) WithPrefix(prefix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesTable with assigned table suffix
func (a SeriesTable) WithSuffix(suffix string) *SeriesTable {
	return newSeriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesTable(schemaName, tableName, alias string) *SeriesTable {
	return &SeriesTable{
		seriesTable: newSeriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSeriesTableImpl("", "excluded", ""),
	}
}

func newSeriesTableImpl(schemaName, tableName, alias string) seriesTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		TitleColumn     = sqlite.StringColumn("title")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, TitleColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{TitleColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return seriesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Title:     TitleColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
