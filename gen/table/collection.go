//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Collection = newCollectionTable("", "collection", "")

type collectionTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Name      sqlite.ColumnString
	Slug      sqlite.ColumnString
	UserID    sqlite.ColumnString
	Public    sqlite.ColumnBool
	Anonymous sqlite.ColumnBool
	Protected sqlite.ColumnBool
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type CollectionTable struct {
	collectionTable

	EXCLUDED collectionTable
}

// AS creates new CollectionTable with assigned alias
func (a CollectionTable) AS(alias string) *CollectionTable {
	return newCollectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionTable with assigned schema name
func (a CollectionTable) FromSchema(schemaName string) *CollectionTable {
	return newCollectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionTable with assigned table prefix
func (a CollectionTable) WithPrefix(prefix string) *CollectionTable {
	return newCollectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionTable with assigned table suffix
func (a CollectionTable) WithSuffix(suffix string) *CollectionTable {
	return newCollectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionTable(schemaName, tableName, alias string) *CollectionTable {
	return &CollectionTable{
		collectionTable: newCollectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newCollectionTableImpl("", "excluded", ""),
	}
}

func newCollectionTableImpl(schemaName, tableName, alias string) collectionTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		NameColumn      = sqlite.StringColumn("name")
		SlugColumn      = sqlite.StringColumn("slug")
		UserIDColumn    = sqlite.StringColumn("user_id")
		PublicColumn    = sqlite.BoolColumn("public")
		AnonymousColumn = sqlite.BoolColumn("anonymous")
		ProtectedColumn = sqlite.BoolColumn("protected")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, NameColumn, SlugColumn, UserIDColumn, PublicColumn, AnonymousColumn, ProtectedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{NameColumn, SlugColumn, UserIDColumn, PublicColumn, AnonymousColumn, ProtectedColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = sqlite.ColumnList{PublicColumn, AnonymousColumn, ProtectedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return collectionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Slug:      SlugColumn,
		UserID:    UserIDColumn,
		Public:    PublicColumn,
		Anonymous: AnonymousColumn,
		Protected: ProtectedColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
