//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserSessions = newUserSessionsTable("", "user_sessions", "")

type userSessionsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnString
	ExpiresAt sqlite.ColumnTimestamp
	UserID    sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserSessionsTable struct {
	userSessionsTable

	EXCLUDED userSessionsTable
}

// AS creates new UserSessionsTable with assigned alias
func (a UserSessionsTable) AS(alias string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSessionsTable with assigned schema name
func (a UserSessionsTable) FromSchema(schemaName string) *UserSessionsTable {
	return newUserSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSessionsTable with assigned table prefix
func (a UserSessionsTable) WithPrefix(prefix string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSessionsTable with assigned table suffix
func (a UserSessionsTable) WithSuffix(suffix string) *UserSessionsTable {
	return newUserSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSessionsTable(schemaName, tableName, alias string) *UserSessionsTable {
	return &UserSessionsTable{
		userSessionsTable: newUserSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserSessionsTableImpl("", "excluded", ""),
	}
}

func newUserSessionsTableImpl(schemaName, tableName, alias string) userSessionsTable {
	var (
		IDColumn        = sqlite.StringColumn("id")
		ExpiresAtColumn = sqlite.TimestampColumn("expires_at")
		UserIDColumn    = sqlite.StringColumn("user_id")
		allColumns      = sqlite.ColumnList{IDColumn, ExpiresAtColumn, UserIDColumn}
		mutableColumns  = sqlite.ColumnList{ExpiresAtColumn, UserIDColumn}
		defaultColumns  = sqlite.ColumnList{}
	)

	return userSessionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ExpiresAt: ExpiresAtColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
