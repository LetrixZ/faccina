//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeriesArchive = newSeriesArchiveTable("", "series_archive", "")

type seriesArchiveTable struct {
	sqlite.Table

	// Columns
	SeriesID  sqlite.ColumnInteger
	ArchiveID sqlite.ColumnInteger
	Order     sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type SeriesArchiveTable struct {
	seriesArchiveTable

	EXCLUDED seriesArchiveTable
}

// AS creates new SeriesArchiveTable with assigned alias
func (a SeriesArchiveTable) AS(alias string) *SeriesArchiveTable {
	return newSeriesArchiveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesArchiveTable with assigned schema name
func (a SeriesArchiveTable) FromSchema(schemaName string) *SeriesArchiveTable {
	return newSeriesArchiveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesArchiveTable with assigned table prefix
func (a SeriesArchiveTable) WithPrefix(prefix string) *SeriesArchiveTable {
	return newSeriesArchiveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesArchiveTable with assigned table suffix
func (a SeriesArchiveTable) WithSuffix(suffix string) *SeriesArchiveTable {
	return newSeriesArchiveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesArchiveTable(schemaName, tableName, alias string) *SeriesArchiveTable {
	return &SeriesArchiveTable{
		seriesArchiveTable: newSeriesArchiveTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newSeriesArchiveTableImpl("", "excluded", ""),
	}
}

func newSeriesArchiveTableImpl(schemaName, tableName, alias string) seriesArchiveTable {
	var (
		SeriesIDColumn  = sqlite.IntegerColumn("series_id")
		ArchiveIDColumn = sqlite.IntegerColumn("archive_id")
		OrderColumn     = sqlite.IntegerColumn("order")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{SeriesIDColumn, ArchiveIDColumn, OrderColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{OrderColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return seriesArchiveTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SeriesID:  SeriesIDColumn,
		ArchiveID: ArchiveIDColumn,
		Order:     OrderColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
