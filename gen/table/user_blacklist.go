//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserBlacklist = newUserBlacklistTable("", "user_blacklist", "")

type userBlacklistTable struct {
	sqlite.Table

	// Columns
	UserID    sqlite.ColumnString
	Blacklist sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserBlacklistTable struct {
	userBlacklistTable

	EXCLUDED userBlacklistTable
}

// AS creates new UserBlacklistTable with assigned alias
func (a UserBlacklistTable) AS(alias string) *UserBlacklistTable {
	return newUserBlacklistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBlacklistTable with assigned schema name
func (a UserBlacklistTable) FromSchema(schemaName string) *UserBlacklistTable {
	return newUserBlacklistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserBlacklistTable with assigned table prefix
func (a UserBlacklistTable) WithPrefix(prefix string) *UserBlacklistTable {
	return newUserBlacklistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserBlacklistTable with assigned table suffix
func (a UserBlacklistTable) WithSuffix(suffix string) *UserBlacklistTable {
	return newUserBlacklistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserBlacklistTable(schemaName, tableName, alias string) *UserBlacklistTable {
	return &UserBlacklistTable{
		userBlacklistTable: newUserBlacklistTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserBlacklistTableImpl("", "excluded", ""),
	}
}

func newUserBlacklistTableImpl(schemaName, tableName, alias string) userBlacklistTable {
	var (
		UserIDColumn    = sqlite.StringColumn("user_id")
		BlacklistColumn = sqlite.StringColumn("blacklist")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{UserIDColumn, BlacklistColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{UserIDColumn, BlacklistColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return userBlacklistTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		Blacklist: BlacklistColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
