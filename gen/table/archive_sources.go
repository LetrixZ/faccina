//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ArchiveSources = newArchiveSourcesTable("", "archive_sources", "")

type archiveSourcesTable struct {
	sqlite.Table

	// Columns
	ArchiveID sqlite.ColumnInteger
	Name      sqlite.ColumnString
	URL       sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ArchiveSourcesTable struct {
	archiveSourcesTable

	EXCLUDED archiveSourcesTable
}

// AS creates new ArchiveSourcesTable with assigned alias
func (a ArchiveSourcesTable) AS(alias string) *ArchiveSourcesTable {
	return newArchiveSourcesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArchiveSourcesTable with assigned schema name
func (a ArchiveSourcesTable) FromSchema(schemaName string) *ArchiveSourcesTable {
	return newArchiveSourcesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArchiveSourcesTable with assigned table prefix
func (a ArchiveSourcesTable) WithPrefix(prefix string) *ArchiveSourcesTable {
	return newArchiveSourcesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArchiveSourcesTable with assigned table suffix
func (a ArchiveSourcesTable) WithSuffix(suffix string) *ArchiveSourcesTable {
	return newArchiveSourcesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArchiveSourcesTable(schemaName, tableName, alias string) *ArchiveSourcesTable {
	return &ArchiveSourcesTable{
		archiveSourcesTable: newArchiveSourcesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newArchiveSourcesTableImpl("", "excluded", ""),
	}
}

func newArchiveSourcesTableImpl(schemaName, tableName, alias string) archiveSourcesTable {
	var (
		ArchiveIDColumn = sqlite.IntegerColumn("archive_id")
		NameColumn      = sqlite.StringColumn("name")
		URLColumn       = sqlite.StringColumn("url")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		allColumns      = sqlite.ColumnList{ArchiveIDColumn, NameColumn, URLColumn, CreatedAtColumn}
		mutableColumns  = sqlite.ColumnList{ArchiveIDColumn, NameColumn, URLColumn, CreatedAtColumn}
		defaultColumns  = sqlite.ColumnList{}
	)

	return archiveSourcesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ArchiveID: ArchiveIDColumn,
		Name:      NameColumn,
		URL:       URLColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
