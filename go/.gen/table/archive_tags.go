//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ArchiveTags = newArchiveTagsTable("", "archive_tags", "")

type archiveTagsTable struct {
	sqlite.Table

	// Columns
	ArchiveID sqlite.ColumnInteger
	TagID     sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ArchiveTagsTable struct {
	archiveTagsTable

	EXCLUDED archiveTagsTable
}

// AS creates new ArchiveTagsTable with assigned alias
func (a ArchiveTagsTable) AS(alias string) *ArchiveTagsTable {
	return newArchiveTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArchiveTagsTable with assigned schema name
func (a ArchiveTagsTable) FromSchema(schemaName string) *ArchiveTagsTable {
	return newArchiveTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArchiveTagsTable with assigned table prefix
func (a ArchiveTagsTable) WithPrefix(prefix string) *ArchiveTagsTable {
	return newArchiveTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArchiveTagsTable with assigned table suffix
func (a ArchiveTagsTable) WithSuffix(suffix string) *ArchiveTagsTable {
	return newArchiveTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArchiveTagsTable(schemaName, tableName, alias string) *ArchiveTagsTable {
	return &ArchiveTagsTable{
		archiveTagsTable: newArchiveTagsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newArchiveTagsTableImpl("", "excluded", ""),
	}
}

func newArchiveTagsTableImpl(schemaName, tableName, alias string) archiveTagsTable {
	var (
		ArchiveIDColumn = sqlite.IntegerColumn("archive_id")
		TagIDColumn     = sqlite.IntegerColumn("tag_id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		allColumns      = sqlite.ColumnList{ArchiveIDColumn, TagIDColumn, CreatedAtColumn}
		mutableColumns  = sqlite.ColumnList{ArchiveIDColumn, TagIDColumn, CreatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn}
	)

	return archiveTagsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ArchiveID: ArchiveIDColumn,
		TagID:     TagIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
