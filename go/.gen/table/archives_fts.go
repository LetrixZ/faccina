//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ArchivesFts = newArchivesFtsTable("", "archives_fts", "")

type archivesFtsTable struct {
	sqlite.Table

	// Columns
	Title       sqlite.ColumnString
	Tags        sqlite.ColumnString
	ArchivesFts sqlite.ColumnString
	Rank        sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ArchivesFtsTable struct {
	archivesFtsTable

	EXCLUDED archivesFtsTable
}

// AS creates new ArchivesFtsTable with assigned alias
func (a ArchivesFtsTable) AS(alias string) *ArchivesFtsTable {
	return newArchivesFtsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArchivesFtsTable with assigned schema name
func (a ArchivesFtsTable) FromSchema(schemaName string) *ArchivesFtsTable {
	return newArchivesFtsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArchivesFtsTable with assigned table prefix
func (a ArchivesFtsTable) WithPrefix(prefix string) *ArchivesFtsTable {
	return newArchivesFtsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArchivesFtsTable with assigned table suffix
func (a ArchivesFtsTable) WithSuffix(suffix string) *ArchivesFtsTable {
	return newArchivesFtsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArchivesFtsTable(schemaName, tableName, alias string) *ArchivesFtsTable {
	return &ArchivesFtsTable{
		archivesFtsTable: newArchivesFtsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newArchivesFtsTableImpl("", "excluded", ""),
	}
}

func newArchivesFtsTableImpl(schemaName, tableName, alias string) archivesFtsTable {
	var (
		TitleColumn       = sqlite.StringColumn("title")
		TagsColumn        = sqlite.StringColumn("tags")
		ArchivesFtsColumn = sqlite.StringColumn("archives_fts")
		RankColumn        = sqlite.StringColumn("rank")
		allColumns        = sqlite.ColumnList{TitleColumn, TagsColumn, ArchivesFtsColumn, RankColumn}
		mutableColumns    = sqlite.ColumnList{TitleColumn, TagsColumn, ArchivesFtsColumn, RankColumn}
		defaultColumns    = sqlite.ColumnList{}
	)

	return archivesFtsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Title:       TitleColumn,
		Tags:        TagsColumn,
		ArchivesFts: ArchivesFtsColumn,
		Rank:        RankColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
