//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var SeriesFts = newSeriesFtsTable("", "series_fts", "")

type seriesFtsTable struct {
	sqlite.Table

	// Columns
	Title     sqlite.ColumnString
	SeriesFts sqlite.ColumnString
	Rank      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type SeriesFtsTable struct {
	seriesFtsTable

	EXCLUDED seriesFtsTable
}

// AS creates new SeriesFtsTable with assigned alias
func (a SeriesFtsTable) AS(alias string) *SeriesFtsTable {
	return newSeriesFtsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeriesFtsTable with assigned schema name
func (a SeriesFtsTable) FromSchema(schemaName string) *SeriesFtsTable {
	return newSeriesFtsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeriesFtsTable with assigned table prefix
func (a SeriesFtsTable) WithPrefix(prefix string) *SeriesFtsTable {
	return newSeriesFtsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeriesFtsTable with assigned table suffix
func (a SeriesFtsTable) WithSuffix(suffix string) *SeriesFtsTable {
	return newSeriesFtsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeriesFtsTable(schemaName, tableName, alias string) *SeriesFtsTable {
	return &SeriesFtsTable{
		seriesFtsTable: newSeriesFtsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newSeriesFtsTableImpl("", "excluded", ""),
	}
}

func newSeriesFtsTableImpl(schemaName, tableName, alias string) seriesFtsTable {
	var (
		TitleColumn     = sqlite.StringColumn("title")
		SeriesFtsColumn = sqlite.StringColumn("series_fts")
		RankColumn      = sqlite.StringColumn("rank")
		allColumns      = sqlite.ColumnList{TitleColumn, SeriesFtsColumn, RankColumn}
		mutableColumns  = sqlite.ColumnList{TitleColumn, SeriesFtsColumn, RankColumn}
		defaultColumns  = sqlite.ColumnList{}
	)

	return seriesFtsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Title:     TitleColumn,
		SeriesFts: SeriesFtsColumn,
		Rank:      RankColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
