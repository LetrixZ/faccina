//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ArchiveImages = newArchiveImagesTable("", "archive_images", "")

type archiveImagesTable struct {
	sqlite.Table

	// Columns
	ArchiveID  sqlite.ColumnInteger
	Filename   sqlite.ColumnString
	PageNumber sqlite.ColumnInteger
	Width      sqlite.ColumnInteger
	Height     sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ArchiveImagesTable struct {
	archiveImagesTable

	EXCLUDED archiveImagesTable
}

// AS creates new ArchiveImagesTable with assigned alias
func (a ArchiveImagesTable) AS(alias string) *ArchiveImagesTable {
	return newArchiveImagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArchiveImagesTable with assigned schema name
func (a ArchiveImagesTable) FromSchema(schemaName string) *ArchiveImagesTable {
	return newArchiveImagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArchiveImagesTable with assigned table prefix
func (a ArchiveImagesTable) WithPrefix(prefix string) *ArchiveImagesTable {
	return newArchiveImagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArchiveImagesTable with assigned table suffix
func (a ArchiveImagesTable) WithSuffix(suffix string) *ArchiveImagesTable {
	return newArchiveImagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArchiveImagesTable(schemaName, tableName, alias string) *ArchiveImagesTable {
	return &ArchiveImagesTable{
		archiveImagesTable: newArchiveImagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newArchiveImagesTableImpl("", "excluded", ""),
	}
}

func newArchiveImagesTableImpl(schemaName, tableName, alias string) archiveImagesTable {
	var (
		ArchiveIDColumn  = sqlite.IntegerColumn("archive_id")
		FilenameColumn   = sqlite.StringColumn("filename")
		PageNumberColumn = sqlite.IntegerColumn("page_number")
		WidthColumn      = sqlite.IntegerColumn("width")
		HeightColumn     = sqlite.IntegerColumn("height")
		allColumns       = sqlite.ColumnList{ArchiveIDColumn, FilenameColumn, PageNumberColumn, WidthColumn, HeightColumn}
		mutableColumns   = sqlite.ColumnList{FilenameColumn, WidthColumn, HeightColumn}
		defaultColumns   = sqlite.ColumnList{}
	)

	return archiveImagesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ArchiveID:  ArchiveIDColumn,
		Filename:   FilenameColumn,
		PageNumber: PageNumberColumn,
		Width:      WidthColumn,
		Height:     HeightColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
