//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserReadHistory = newUserReadHistoryTable("", "user_read_history", "")

type userReadHistoryTable struct {
	sqlite.Table

	// Columns
	UserID     sqlite.ColumnString
	ArchiveID  sqlite.ColumnInteger
	LastPage   sqlite.ColumnInteger
	StartPage  sqlite.ColumnInteger
	MaxPage    sqlite.ColumnInteger
	StartedAt  sqlite.ColumnTimestamp
	LastReadAt sqlite.ColumnTimestamp
	FinishedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserReadHistoryTable struct {
	userReadHistoryTable

	EXCLUDED userReadHistoryTable
}

// AS creates new UserReadHistoryTable with assigned alias
func (a UserReadHistoryTable) AS(alias string) *UserReadHistoryTable {
	return newUserReadHistoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserReadHistoryTable with assigned schema name
func (a UserReadHistoryTable) FromSchema(schemaName string) *UserReadHistoryTable {
	return newUserReadHistoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserReadHistoryTable with assigned table prefix
func (a UserReadHistoryTable) WithPrefix(prefix string) *UserReadHistoryTable {
	return newUserReadHistoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserReadHistoryTable with assigned table suffix
func (a UserReadHistoryTable) WithSuffix(suffix string) *UserReadHistoryTable {
	return newUserReadHistoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserReadHistoryTable(schemaName, tableName, alias string) *UserReadHistoryTable {
	return &UserReadHistoryTable{
		userReadHistoryTable: newUserReadHistoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newUserReadHistoryTableImpl("", "excluded", ""),
	}
}

func newUserReadHistoryTableImpl(schemaName, tableName, alias string) userReadHistoryTable {
	var (
		UserIDColumn     = sqlite.StringColumn("user_id")
		ArchiveIDColumn  = sqlite.IntegerColumn("archive_id")
		LastPageColumn   = sqlite.IntegerColumn("last_page")
		StartPageColumn  = sqlite.IntegerColumn("start_page")
		MaxPageColumn    = sqlite.IntegerColumn("max_page")
		StartedAtColumn  = sqlite.TimestampColumn("started_at")
		LastReadAtColumn = sqlite.TimestampColumn("last_read_at")
		FinishedAtColumn = sqlite.TimestampColumn("finished_at")
		allColumns       = sqlite.ColumnList{UserIDColumn, ArchiveIDColumn, LastPageColumn, StartPageColumn, MaxPageColumn, StartedAtColumn, LastReadAtColumn, FinishedAtColumn}
		mutableColumns   = sqlite.ColumnList{LastPageColumn, StartPageColumn, MaxPageColumn, StartedAtColumn, LastReadAtColumn, FinishedAtColumn}
		defaultColumns   = sqlite.ColumnList{StartedAtColumn, LastReadAtColumn}
	)

	return userReadHistoryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		ArchiveID:  ArchiveIDColumn,
		LastPage:   LastPageColumn,
		StartPage:  StartPageColumn,
		MaxPage:    MaxPageColumn,
		StartedAt:  StartedAtColumn,
		LastReadAt: LastReadAtColumn,
		FinishedAt: FinishedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
