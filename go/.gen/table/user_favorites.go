//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserFavorites = newUserFavoritesTable("", "user_favorites", "")

type userFavoritesTable struct {
	sqlite.Table

	// Columns
	UserID    sqlite.ColumnString
	ArchiveID sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type UserFavoritesTable struct {
	userFavoritesTable

	EXCLUDED userFavoritesTable
}

// AS creates new UserFavoritesTable with assigned alias
func (a UserFavoritesTable) AS(alias string) *UserFavoritesTable {
	return newUserFavoritesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserFavoritesTable with assigned schema name
func (a UserFavoritesTable) FromSchema(schemaName string) *UserFavoritesTable {
	return newUserFavoritesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserFavoritesTable with assigned table prefix
func (a UserFavoritesTable) WithPrefix(prefix string) *UserFavoritesTable {
	return newUserFavoritesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserFavoritesTable with assigned table suffix
func (a UserFavoritesTable) WithSuffix(suffix string) *UserFavoritesTable {
	return newUserFavoritesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserFavoritesTable(schemaName, tableName, alias string) *UserFavoritesTable {
	return &UserFavoritesTable{
		userFavoritesTable: newUserFavoritesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUserFavoritesTableImpl("", "excluded", ""),
	}
}

func newUserFavoritesTableImpl(schemaName, tableName, alias string) userFavoritesTable {
	var (
		UserIDColumn    = sqlite.StringColumn("user_id")
		ArchiveIDColumn = sqlite.IntegerColumn("archive_id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		allColumns      = sqlite.ColumnList{UserIDColumn, ArchiveIDColumn, CreatedAtColumn}
		mutableColumns  = sqlite.ColumnList{UserIDColumn, ArchiveIDColumn, CreatedAtColumn}
		defaultColumns  = sqlite.ColumnList{CreatedAtColumn}
	)

	return userFavoritesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		ArchiveID: ArchiveIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
