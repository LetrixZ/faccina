//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CollectionArchive = newCollectionArchiveTable("", "collection_archive", "")

type collectionArchiveTable struct {
	sqlite.Table

	// Columns
	CollectionID sqlite.ColumnInteger
	ArchiveID    sqlite.ColumnInteger
	Order        sqlite.ColumnInteger
	CreatedAt    sqlite.ColumnTimestamp
	UpdatedAt    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type CollectionArchiveTable struct {
	collectionArchiveTable

	EXCLUDED collectionArchiveTable
}

// AS creates new CollectionArchiveTable with assigned alias
func (a CollectionArchiveTable) AS(alias string) *CollectionArchiveTable {
	return newCollectionArchiveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionArchiveTable with assigned schema name
func (a CollectionArchiveTable) FromSchema(schemaName string) *CollectionArchiveTable {
	return newCollectionArchiveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionArchiveTable with assigned table prefix
func (a CollectionArchiveTable) WithPrefix(prefix string) *CollectionArchiveTable {
	return newCollectionArchiveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionArchiveTable with assigned table suffix
func (a CollectionArchiveTable) WithSuffix(suffix string) *CollectionArchiveTable {
	return newCollectionArchiveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionArchiveTable(schemaName, tableName, alias string) *CollectionArchiveTable {
	return &CollectionArchiveTable{
		collectionArchiveTable: newCollectionArchiveTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newCollectionArchiveTableImpl("", "excluded", ""),
	}
}

func newCollectionArchiveTableImpl(schemaName, tableName, alias string) collectionArchiveTable {
	var (
		CollectionIDColumn = sqlite.IntegerColumn("collection_id")
		ArchiveIDColumn    = sqlite.IntegerColumn("archive_id")
		OrderColumn        = sqlite.IntegerColumn("order")
		CreatedAtColumn    = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn    = sqlite.TimestampColumn("updated_at")
		allColumns         = sqlite.ColumnList{CollectionIDColumn, ArchiveIDColumn, OrderColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = sqlite.ColumnList{OrderColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns     = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return collectionArchiveTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CollectionID: CollectionIDColumn,
		ArchiveID:    ArchiveIDColumn,
		Order:        OrderColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
